{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "5\n",
      "7\n",
      "11\n",
      "13\n",
      "17\n",
      "19\n",
      "23\n",
      "29\n",
      "31\n",
      "37\n",
      "41\n",
      "43\n",
      "47\n",
      "53\n",
      "59\n",
      "61\n",
      "67\n",
      "71\n",
      "73\n"
     ]
    }
   ],
   "source": [
    "c=0\n",
    "for i in range(3,74):\n",
    "    for j in range(2,i+1):\n",
    "        if(i%j==0):\n",
    "            c=c+1\n",
    "    if(c==1):\n",
    "        print(i)\n",
    "    c=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n",
      "STRING SAMPLE\n",
      "string sample\n",
      "['String', 'sample']\n",
      "7\n",
      "False\n",
      "False\n",
      "False\n",
      "False\n",
      "String Sample\n",
      "String sample\n",
      "String sample\n",
      "0\n",
      "False\n",
      "False\n",
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "s=\"String sample\"\n",
    "print(len(s))\n",
    "print(s.upper())\n",
    "print(s.lower())\n",
    "print(s.split())\n",
    "print(s.find('sample'))\n",
    "print(s.isalpha())\n",
    "print(s.isdigit())\n",
    "print(s.islower())\n",
    "print(s.isspace())\n",
    "print(s.replace(\"sample\",\"Sample\"))\n",
    "print(s.capitalize())\n",
    "print(s.center(7))\n",
    "print(s.index(\"String\"))\n",
    "print(s.isalnum())\n",
    "print(s.isdecimal())\n",
    "print(type(s))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "madam\n",
      "master\n",
      "madam  is palindrome\n",
      "master  is not palindrome\n",
      "it is not anagram\n"
     ]
    }
   ],
   "source": [
    "a=input()\n",
    "b=input()\n",
    "c=0\n",
    "if(a==a[::-1]):\n",
    "    print(a,\" is palindrome\")\n",
    "    c=1\n",
    "else:\n",
    "    print(a,\"is not palindrome\")\n",
    "if(b==b[::-1]):\n",
    "    print(b,\" is palindrome\")\n",
    "    c=1\n",
    "else:\n",
    "    print(b,\" is not palindrome\")\n",
    "if(sorted(a)==sorted(b)):\n",
    "    print(\"It is an anagram\")\n",
    "    c=1\n",
    "else:\n",
    "    print(\"it is not anagram\") \n",
    "    \n",
    "if(c==0):\n",
    "    print(\"None of them\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dr Darshan Ingle@AL-ML Trainer\n",
      "drdarshaninglealmltrainer\n"
     ]
    }
   ],
   "source": [
    "s=input()\n",
    "c=\"\"\n",
    "s=s.lower()\n",
    "for i in range(len(s)):\n",
    "    if(s[i].isalpha()==True):\n",
    "        c=c+s[i]\n",
    "print(c) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
