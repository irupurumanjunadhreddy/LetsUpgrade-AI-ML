{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter first no 3+7j\n",
      "enter second no 4+2j\n",
      "(-1+5j)\n"
     ]
    }
   ],
   "source": [
    "a=complex(input('enter first no '))\n",
    "b=complex(input('enter second no '))\n",
    "c=a-b\n",
    "print(c)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter no 64\n",
      "16.0\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter no \"))\n",
    "print(a**1/4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter 1st no 6\n",
      "enter 2nd no 3\n",
      "1st no  3\n",
      "2nd no  6\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter 1st no \"))\n",
    "b=int(input(\"enter 2nd no \"))\n",
    "c=a\n",
    "a=b\n",
    "b=c\n",
    "print(\"1st no \",a)\n",
    "print(\"2nd no \",b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter 1st no 6\n",
      "enter 2nd no 9\n",
      "1st no  9\n",
      "2nd no  6\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter 1st no \"))\n",
    "b=int(input(\"enter 2nd no \"))\n",
    "a,b=b,a\n",
    "print(\"1st no \",a)\n",
    "print(\"2nd no \",b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter temp 86\n",
      "30.0  celsius\n",
      "303.15  kelvin\n"
     ]
    }
   ],
   "source": [
    "f=float(input(\"enter temp \"))\n",
    "c=(f-32)*5/9\n",
    "k=(f-32)*5/9+273.15\n",
    "print(c,\" celsius\")\n",
    "print(k,\" kelvin\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "5.88\n",
      "hello\n",
      "0\n",
      "<class 'int'>\n",
      "<class 'float'>\n",
      "<class 'str'>\n",
      "<class 'bool'>\n",
      "<class 'tuple'>\n"
     ]
    }
   ],
   "source": [
    "a=int(input())\n",
    "b=float(input())\n",
    "c=input()\n",
    "d=bool(input())\n",
    "e=(4,67,29,1)\n",
    "print(type(a))\n",
    "print(type(b))\n",
    "print(type(c))\n",
    "print(type(d))\n",
    "print(type(e))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.Open the github website from any of the search engines.\n",
    "2.Create a github account.\n",
    "3.After creating the account.\n",
    "4.Enter the repository name as the Letsupgrade AL-ML.\n",
    "5.In the description, name it as assignment.\n",
    "6.Make sure that your account is public.\n",
    "7.Create the repository.\n",
    "8.save the notebook file in your local.\n",
    "9.Open the repository and click the upload files.\n",
    "10.Now drag the assignment of the day to the repository.\n",
    "11.Copy the link of the chrome, to save it in the google form.\n",
    "12.Make sure you receive an email from Letsupgrade."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
